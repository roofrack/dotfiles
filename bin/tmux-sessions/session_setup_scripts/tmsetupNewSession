#!/usr/bin/bash
#  ---------------------------------------------------------------
# | Set up a quick & easy REPL using Tmux, Nvim, vim-tmux-runner |
# --------------------------------------<robaylard@gmail.com>----
# shellcheck source=/dev/null

TMUX_TEMPLATE_FILE="$HOME/bin/tmux-sessions/session_setup_scripts/tmux_template.sh"

# Import some ui decorations (ui_button_printf & border_line)
# Ansi color file is also imported with this source
ui_decoration() {
  source "$HOME/bin/shell_scripts/ui_components/ui_components.sh"
  border_line 50
  ui_button_printf "TMUX Nvim Session Maker"
  border_line
}

# returns a string
# parameter: string argument
prompt_heading() {
  printf "${bold}${purple}%s${normal}\n" "$1"
}

# Returns user input variable
# parameters:
#   1. inserts placeholder text for '-i' (string)
#   2. prompt string
#   3. enter a variable name (leave unquoted)
# -i insert text at beginning of prompt, -r not sure why, -n 1 Hotkey,
# -e gives readline file completion in prompt, -p prompt \
# need the " " with the -p otherwise it wont show the input arrow thingy
prompt_user() {
  read -i "$1" -r -e -p "$2" "$3"
}

# Returns global variable EDIT_FILE
# Validates variable by testing if directory path exists.
# Use tab completion when prompted
# For both conditions to be true to exit out of while loop...
#   EDIT_FILE Directory path MUST exist AND
#   EDIT_FILE must be a file name and NOT a directory name
get_edit_file() {
  prompt_heading "Enter a File to Edit:"
  while true; do
    prompt_user "$HOME/coding-practice/" " " EDIT_FILE
    if [[ -d "$(dirname "$EDIT_FILE")" ]] && [[ ! -d $EDIT_FILE ]]; then
      break
    fi
  done
}

# Use the EDIT_FILE variable to build & Return:
#   SESSION_NAME variable
#   SESSION_FILE_NAME variable
build_session_name_variable() {
  local dir_name
  local file_name
  dir_name=$(basename "$(dirname "$EDIT_FILE")")
  file_name=$(basename "${EDIT_FILE%.*}")
  SESSION_NAME="${dir_name}_${file_name}"
  SESSION_FILE_NAME="$HOME/bin/tmux-sessions/session_names/tm${SESSION_NAME}.sh"
}

# Returns a tmux session (calls one of the 3 functions below)
get_tmux_session() {
  if [[ -f "${SESSION_FILE_NAME}" ]]; then
    attach_to_existing_session_file
  else
    prompt_heading "Edit and Save Custom Session?"
    prompt_user "" " y to save:" REPLY
    if [[ "$REPLY" == "y" ]]; then
      build_custom_session
    else
      build_repl_session
    fi
  fi
}

attach_to_existing_session_file() {
  border_line
  printf "The session_file${bold}${italic}${green} %s ${normal}already exists\n" \
    "$(basename "$SESSION_FILE_NAME")"
  source "$SESSION_FILE_NAME"
}

build_custom_session() {
  cp "$TMUX_TEMPLATE_FILE" "$SESSION_FILE_NAME"
  prepend_text
  nvim -c "norm 4G20| <cr>" "$SESSION_FILE_NAME"
  border_line
  source "$SESSION_FILE_NAME"
}

build_repl_session() {
  border_line
  source "$TMUX_TEMPLATE_FILE"
}

# TODO: figure out a cleaner, better way.
# Need to prepend 2 variables for executable file to work on its own.
# These next lines prepend to the top of the newly created SESSION_FILE_NAME
# file in a convaluted way. It seems to work.Tried using sed but couldnt get
# it to expand the variable inside the sed command
prepend_text() {
  echo "SESSION_NAME=\"$SESSION_NAME\"
      $(cat "$SESSION_FILE_NAME")" >"$SESSION_FILE_NAME"
  echo "EDIT_FILE=\"$EDIT_FILE\"
      $(cat "$SESSION_FILE_NAME")" >"$SESSION_FILE_NAME"
}

main() {
  ui_decoration
  get_edit_file
  build_session_name_variable
  get_tmux_session
}
main
