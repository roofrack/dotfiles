#!/usr/bin/bash
# -------------------------------------------------------------
# Set up a quick & easy REPL using Tmux, Nvim, vim-tmux-runner.
# -----------------------------------< robaylard@gmail.com >---

# Import some ui decorations (ui_button_printf & border_line)
# Ansi color file is also imported with this source
ui_decoration() {
  source "$HOME/bin/shell_scripts/ui_components/ui_components.sh"
  border_line 50
  ui_button_printf "TMUX Nvim VTR REPL"
  border_line
}

# returns a string
# parameter: string argument
prompt_heading() {
  printf "${bold}${purple}%s${normal}\n" "$1"
}

# User_prompt returns a global variable
# parameters:
#   1. inserts placeholder text for '-i' (string)
#   2. prompt string
#   3. enter a variable name (leave unquoted)
# -i insert text at beginning of prompt, -r not sure why, -n 1 Hotkey,
# -e gives readline file completion in prompt, -p prompt \
# need the " " with the -p otherwise it wont show the input arrow thingy
user_prompt() {
  read -i "$1" -r -e -p "$2" "$3"
}

# Returns a variable EDIT_FILE (which is a file and its path)
# Validates variable by testing if directory path & file exist
# Use tab completion when prompted
# For both conditions to be true to exit out of while loop...
#   EDIT_FILE Directory path MUST exist AND
#   EDIT_FILE must be a file name and NOT a directory name
get_edit_file() {
  prompt_heading "Enter a File to Edit:"
  while true; do
    user_prompt "$HOME/coding-practice/" " " EDIT_FILE
    if [[ -d "$(dirname "$EDIT_FILE")" ]] && [[ ! -d $EDIT_FILE ]]; then
      break
    fi
  done
  file_exists "$EDIT_FILE"
}

# Returns a message string if the file exists
# parameter: file path to test
file_exists() {
  if [[ ! -f "$1" ]]; then
    printf "%s ${bold}${italic}${green}$(basename "$1")${normal} %s\n" \
      "The file" "will be created once it is saved in nvim"
  fi
}

# Using the user input EDIT_FILE to build the SESSION_NAME variable
build_session_name() {
  dir_name=$(basename "$(dirname "$EDIT_FILE")")
  file_name=$(basename "${EDIT_FILE%.*}")
  SESSION_NAME="${dir_name}_${file_name}"
}

# Returns a quick tmux session using template_name but does not save file
repl_session() {
  source "$HOME/coding-practice/shell/tmux/session_setup_scripts/tmux_template.sh"
}

# Returns a custom tmux session and saves the setup file
# A new file will open in nvim to edit (add/delete tmux settings)
# Can run this executable file to restart the custom session
custom_session() {
  template_name="$HOME/coding-practice/shell/tmux/session_setup_scripts/tmux_template.sh"
  tm_session_file_name="$HOME/coding-practice/shell/tmux/session_setup_scripts/tm${SESSION_NAME}.sh"
  if [[ ! -f "${tm_session_file_name}" ]]; then
    cp "$template_name" "$tm_session_file_name"
    prepend_text
    nvim -c "norm 4G20| <cr>" "$tm_session_file_name"
    source "$tm_session_file_name"
  else
    echo "This file already exists"
  fi
}

# Need to prepend 2 variables for executable file to work on its own
# These next lines prepend to the top of the newly
# created tm_session_file_name file in a convaluted way. It seems to work.Tried
# using sed but couldnt get it to expand the variable inside the sed command
# TODO: figure out a cleaner, better way.
prepend_text() {
  echo "SESSION_NAME=\"$SESSION_NAME\"
      $(cat "$tm_session_file_name")" >"$tm_session_file_name"
  echo
  echo "EDIT_FILE=\"$EDIT_FILE\"
      $(cat "$tm_session_file_name")" >"$tm_session_file_name"
}

# Returns string
choose_session_prompt() {
  prompt_heading "Save and/or Edit custom Session?"
  user_prompt "" "y/n " REPLY
  border_line
}

# Any string input here including 'Enter' (except y) select repl_session
# Choose custom or quick repl tmux session
get_tmux_session() {
  choose_session_prompt
  if [[ "$REPLY" == "y" ]]; then
    custom_session
  else
    repl_session
  fi
}

main() {
  ui_decoration
  get_edit_file
  build_session_name
  get_tmux_session
}
main
